// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generates simple Mapper 1`] = `
Array [
  File {
    "content": "/* tslint:disable */

/**
 * This file was generated with Dynogen.
 * DO NOT EDIT!
 */
export interface User {
  id: string;
  name?: string;
  login: string;
}

export type UninitializedUser = User;

export type GeneratedPartialUser = {};",
    "path": "./User.ts",
  },
  File {
    "content": "/* tslint:disable */

/**
 * This file was generated with Dynogen.
 * DO NOT EDIT!
 */
import { DocumentClient } from 'aws-sdk/clients/dynamodb';
import * as Ajv from 'ajv';

import {
  User,
  UninitializedUser
} from './User';




export interface UserKey {
  id?: string;
}


type IndexName = never;

const ajv = new Ajv({
  allErrors: true
});

export class UserMapper {
  constructor(private readonly client: DocumentClient) {}

  static readonly tableSchema = {
    TableName: \\"Users\\",
    KeySchema: [
      {
        AttributeName: \\"id\\",
        KeyType: \\"HASH\\"
      }
    ],
    AttributeDefinitions: [
      {
        AttributeName: \\"id\\",
        AttributeType: \\"S\\"
      }
    ]
  };

  static get tableName(): string {
    return UserMapper.tableSchema.TableName;
  }

  static initialize(item: UninitializedUser): User {
    return {
      ...item
    };
  }

  private static readonly validator = ajv.compile({
    additionalProperties: false,
    name: \\"User\\",
    type: \\"object\\",
    required: [
      \\"id\\",
      \\"login\\"
    ],
    properties: {
      id: {
        type: \\"string\\"
      },
      name: {
        type: \\"string\\"
      },
      login: {
        type: \\"string\\"
      }
    }
  });
  
  private static readonly partialValidator = ajv.compile({
    additionalProperties: false,
    name: \\"User\\",
    type: \\"object\\",
    required: [

    ],
    properties: {
      id: {
        type: \\"string\\"
      },
      name: {
        type: \\"string\\"
      },
      login: {
        type: \\"string\\"
      }
    }
  });

  static async validate(item: Readonly<User>): Promise<void> {
    if (!await UserMapper.validator(item)) throw new Error(ajv.errorsText());
  }

  static async partialValidate(item: Readonly<Partial<User>>): Promise<void> {
    if (!await UserMapper.partialValidator(item)) throw new Error(ajv.errorsText());
  }

  async put(toPut: Readonly<UninitializedUser>): Promise<User> {
    const item = {
      ...toPut,
      ...UserMapper.initialize(toPut)
    } as User;

    await UserMapper.validate(item);
    await this.client
      .put({
        TableName: UserMapper.tableName,
        Item: item
      })
      .promise();

    // The input item is returned because getting new fields on PutItem
    // operation is impossible. DynamoDB only supports 'OLD_VALUES' and
    // 'NONE' for this operation. This would otherwise require a
    // subsequent query.
    return item;
  }

  async get(key: Readonly<UserKey>): Promise<User> {
    const { Item: item } = await this.client
      .get({
        TableName: UserMapper.tableName,
        Key: key
      })
      .promise();

    if (!item) {
      throw new Error('User not found');
    }

    return item as User;
  }

  async delete(key: Readonly<UserKey>): Promise<void> {
    await this.client
      .delete({
        TableName: UserMapper.tableName,
        Key: key
      })
      .promise();
  }

  async query(): Promise<User[]> {
    const result = await this.client
      .query({
        TableName: UserMapper.tableName
      })
      .promise();

    return result.Items as User[];
  }

  async update(
    key: Readonly<UserKey>,
    patch: Readonly<Partial<User>>
  ): Promise<User> {
    await UserMapper.partialValidate(patch);
    const attributeUpdates = Object.entries(patch).reduce(
      (acc, [key, value]) => ({
        ...acc,
        [key]: {
          Value: value,
          Action: \\"PUT\\"
        }
      }),
      {}
    );

    const { Attributes: old } = await this.client
      .update({
        TableName: UserMapper.tableName,
        Key: key,
        AttributeUpdates: attributeUpdates,
        ReturnValues: \\"ALL_OLD\\"
      })
      .promise();

    return {
      ...(old as User),
      ...patch
    };
  }
}",
    "path": "./Mapper.ts",
  },
]
`;

exports[`Generates simple Mapper 2`] = `
Array [
  File {
    "content": "/* tslint:disable */

/**
 * This file was generated with Dynogen.
 * DO NOT EDIT!
 */
export interface User {
  id: string;
  name?: string;
  login: string;
}

export interface UninitializedUser {
  id?: string;
  name?: string;
  login: string;
}

export interface GeneratedPartialUser {
  id: string;
  name: string;
}",
    "path": "./User.ts",
  },
  File {
    "content": "/* tslint:disable */

/**
 * This file was generated with Dynogen.
 * DO NOT EDIT!
 */
import { DocumentClient } from 'aws-sdk/clients/dynamodb';
import * as Ajv from 'ajv';

import {
  User,
  UninitializedUser
} from './User';

import uuid = require('uuid/v4');
import { generateRandomName } from './util';


export interface UserKey {
  id?: string;
  name?: string;
  login?: string;
}


type IndexName = \\"byLogin\\" | \\"byName\\";

const ajv = new Ajv({
  allErrors: true
});

export class UserMapper {
  constructor(private readonly client: DocumentClient) {}

  static readonly tableSchema = {
    TableName: \\"Users\\",
    KeySchema: [
      {
        AttributeName: \\"id\\",
        KeyType: \\"HASH\\"
      },
      {
        AttributeName: \\"name\\",
        KeyType: \\"RANGE\\"
      }
    ],
    AttributeDefinitions: [
      {
        AttributeName: \\"id\\",
        AttributeType: \\"S\\"
      },
      {
        AttributeName: \\"name\\",
        AttributeType: \\"S\\"
      }
    ]
  };

  static get tableName(): string {
    return UserMapper.tableSchema.TableName;
  }

  static initialize(item: UninitializedUser): User {
    return {
      id: uuid(),
      name: generateRandomName(),
      ...item
    };
  }

  private static readonly validator = ajv.compile({
    additionalProperties: false,
    name: \\"User\\",
    type: \\"object\\",
    required: [
      \\"id\\",
      \\"login\\"
    ],
    properties: {
      id: {
        type: \\"string\\"
      },
      name: {
        type: \\"string\\"
      },
      login: {
        type: \\"string\\"
      }
    }
  });
  
  private static readonly partialValidator = ajv.compile({
    additionalProperties: false,
    name: \\"User\\",
    type: \\"object\\",
    required: [

    ],
    properties: {
      id: {
        type: \\"string\\"
      },
      name: {
        type: \\"string\\"
      },
      login: {
        type: \\"string\\"
      }
    }
  });

  static async validate(item: Readonly<User>): Promise<void> {
    if (!await UserMapper.validator(item)) throw new Error(ajv.errorsText());
  }

  static async partialValidate(item: Readonly<Partial<User>>): Promise<void> {
    if (!await UserMapper.partialValidator(item)) throw new Error(ajv.errorsText());
  }

  async put(toPut: Readonly<UninitializedUser>): Promise<User> {
    const item = {
      ...toPut,
      ...UserMapper.initialize(toPut)
    } as User;

    await UserMapper.validate(item);
    await this.client
      .put({
        TableName: UserMapper.tableName,
        Item: item
      })
      .promise();

    // The input item is returned because getting new fields on PutItem
    // operation is impossible. DynamoDB only supports 'OLD_VALUES' and
    // 'NONE' for this operation. This would otherwise require a
    // subsequent query.
    return item;
  }

  async get(key: Readonly<UserKey>): Promise<User> {
    const { Item: item } = await this.client
      .get({
        TableName: UserMapper.tableName,
        Key: key
      })
      .promise();

    if (!item) {
      throw new Error('User not found');
    }

    return item as User;
  }

  async delete(key: Readonly<UserKey>): Promise<void> {
    await this.client
      .delete({
        TableName: UserMapper.tableName,
        Key: key
      })
      .promise();
  }

  async query(): Promise<User[]> {
    const result = await this.client
      .query({
        TableName: UserMapper.tableName
      })
      .promise();

    return result.Items as User[];
  }

  async update(
    key: Readonly<UserKey>,
    patch: Readonly<Partial<User>>
  ): Promise<User> {
    await UserMapper.partialValidate(patch);
    const attributeUpdates = Object.entries(patch).reduce(
      (acc, [key, value]) => ({
        ...acc,
        [key]: {
          Value: value,
          Action: \\"PUT\\"
        }
      }),
      {}
    );

    const { Attributes: old } = await this.client
      .update({
        TableName: UserMapper.tableName,
        Key: key,
        AttributeUpdates: attributeUpdates,
        ReturnValues: \\"ALL_OLD\\"
      })
      .promise();

    return {
      ...(old as User),
      ...patch
    };
  }
}",
    "path": "./Mapper.ts",
  },
]
`;
